 ```python
# coding: utf-8

"""Template for Alembic migration scripts."""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'your_revision_id'
down_revision = 'your_down_revision_id'
branch_labels = None
depends_on = None

def upgrade():
    """
    Upgrade database schema.

    This function contains the logic to upgrade the database schema
    to the next version. It includes creating new tables, columns,
    adding indexes, constraints, and migrating data if necessary.
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('new_table',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_new_table_name'), 'new_table', ['name'], unique=True)

    # Migrate data from old_table to new_table
    op.execute("""
        INSERT INTO new_table (name, created_at)
        SELECT name, created_at FROM old_table
    """)

    # Drop the old_table
    op.drop_table('old_table')
    # ### end Alembic commands ###

def downgrade():
    """
    Downgrade database schema.

    This function contains the logic to downgrade the database schema
    to the previous version. It includes recreating the old_table,
    migrating data back, and dropping the new_table.
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('old_table',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    # Migrate data from new_table back to old_table
    op.execute("""
        INSERT INTO old_table (name, created_at)
        SELECT name, created_at FROM new_table
    """)

    # Drop the new_table
    op.drop_table('new_table')
    # ### end Alembic commands ###

# Error handling can be added at the application level
# or using Alembic's event hooks if more granular control is needed.
```

请注意，你需要将 `your_revision_id` 和 `your_down_revision_id` 替换为实际的修订ID。此外，`old_table` 和 `new_table` 应该替换为实际的表名，`name` 和 `created_at` 应该替换为实际的列名。