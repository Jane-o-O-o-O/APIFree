 ```ini
# migrations/alembic.ini
# Configuration for Alembic migrations

# A generic comment for this file
sqlalchemy.url = sqlite:///example.db  # URL of the database

# Other Alembic configurations
script_location = migrations
version_locations = migrations/versions
# template_file = migrations/env.py.mako
# ...
```

```python
# migrations/env.py
"""Migrations environment setup script for Alembic."""
from alembic import context
from logging.config import fileConfig

# Import your models here
from myapp.models import Base

# Set up logging configuration
fileConfig(context.config.config_file_name)

# Connect to the database
target_metadata = Base.metadata

def run_migrations_offline():
    """Run migrations in 'offline' mode."""
    url = context.config.get_main_option("sqlalchemy.url")
    context.configure(url=url)

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    """Run migrations in 'online' mode."""
    connectable = context.configure(connection_opts={"poolclass": NullPool})
    with context.begin_transaction():
        context.run_migrations()
    connectable.close()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
```

```python
# migrations/versions/001_initial.py
"""Initial migration.

Revisions:
  - 001_initial: Create tables
"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '001_initial'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    """Create tables."""
    op.create_table('users',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('username', sa.String(80), unique=True, nullable=False),
        sa.Column('email', sa.String(120), unique=True, nullable=False),
        sa.Column('created_at', sa.DateTime, server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.Column('updated_at', sa.DateTime, onupdate=sa.text('CURRENT_TIMESTAMP'))
    )
    op.create_table('posts',
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('user_id', sa.Integer, sa.ForeignKey('users.id'), nullable=False),
        sa.Column('title', sa.String(120), nullable=False),
        sa.Column('content', sa.Text, nullable=False),
        sa.Column('created_at', sa.DateTime, server_default=sa.text('CURRENT_TIMESTAMP')),
        sa.Column('updated_at', sa.DateTime, onupdate=sa.text('CURRENT_TIMESTAMP'))
    )

def downgrade():
    """Drop tables."""
    op.drop_table('posts')
    op.drop_table('users')
```

This setup includes a basic configuration for Alembic, environment setup script, and an initial migration script. The initial migration script creates two tables: `users` and `posts`. The `upgrade` function creates the tables, and the `downgrade` function drops them. This setup supports both online and offline migrations and includes basic error handling through Alembic's configuration system.